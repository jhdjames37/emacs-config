#+title: Emacs Configuration
#+STARTUP: overview
#+TODO: TODO(t) | DONE(d)
#+PROPERTY: LOGGING nil
#+PROPERTY: header-args    :results silent

* Overview

Here is my emacs config.

** Notes

+ checkout: https://emacs-china.org/t/emacs-builtin-mode/11937/1

* Custom Variables

These are custom varibles, which may vary in different platforms

Modify them in =settings.el=

TODO: 
+ [ ] Set them to =defcustom=
  This has to ensure that they are not used before =custom.el= is loaded

#+begin_src emacs-lisp
  (defvar my/use-zsh t
    "Whether to use zsh."
    )
  (defvar my/use-builtin-theme nil
    "Use built-in background instead of doom-themes.")

  (defvar my/enabled-lang
    '(cpp cuda python js rust latex org markdown typst yaml dotenv dockerfile caddyfile bison)
    "Language extensions enabled.
      available: (cpp cuda python js rust latex org markdown typst yaml dotenv dockerfile caddyfile bison)")

  (defvar my/enabled-feat
    '()
    "Extended feature which requires external support
     available: (ellama)")

  (defvar my/minibuffer-backend 'vertico
    "Backend for completion of minibuffer
    available: vertico helm")

  (defvar my/use-lsp-frontend 'lsp-mode
    "LSP frontend")

  (defvar my/font-scale 1.4
    "Chinese font scale")

  (defvar my/org-agenda-location "~/Documents/notes/agenda.org"
    "File for org-agenda")
#+end_src

Loading and auxilliary functions.

#+begin_src elisp
  (defun my/expand-config-dir (filename)
    "FILENAME: filename in the config directory."
    (expand-file-name filename user-emacs-directory))

  (when (file-exists-p (my/expand-config-dir "settings.el"))
    (load (my/expand-config-dir "settings.el"))
    )
#+end_src

* Basic setups
** Upstream server

Setting upstream package servers (enabling melpa as well).

I use git submodules instead of packages like *straight* so that some of them can be imported optionally.

#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("non-gnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
          ;;("melpa-stable" . "https://stable.melpa.org/packages/")
          ;;("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/")
          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ))
#+end_src

** use-package

Including =use-package=. All packages are set to be installed by default.

#+begin_src emacs-lisp
  ;; In Emacs 30, `use-package` has integrated into built-in package.
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package use-package-ensure-system-package)
  (use-package delight :ensure t)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)  
#+end_src

** TODO load-org

NOTE: It seems like that Emacs auto-compiles =.org= into =.el=? BUT No modifications.

NOTE: https://stackoverflow.com/questions/37564071/can-company-mode-complete-my-code-in-org-mode

** Custom Files

Do not let custom-variables accidentally pollute =init.el= or other files.

#+begin_src emacs-lisp
  (use-package cus-edit
    :ensure nil
    :custom (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (when (file-exists-p custom-file)
      (load custom-file t))
    )
#+end_src

** Built-in config and modes

These are native configuration of emacs. A minimal config without installing other packages can also be seen in =simple.el=.

#+begin_src emacs-lisp
  (setq-default
   backup-inhibited t ; No backup file needed
   inhibit-startup-screen t ; Do not use default startup screen, use customized instead
   indent-tabs-mode nil ; Do not replace spaces with tabs
   )

  (setq
   word-wrap-by-category t ; See https://emacs-china.org/t/topic/2616/25
   enable-remote-dir-locals t ; See https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html
   ring-bell-function 'ignore ; See https://emacs-china.org/t/topic/4972
   )

  ;; New feature for matching parenthses outside of the screen
  ;; Ref: https://emacs-china.org/t/emacs-30/29017/14
  (when (version<= "30.1" emacs-version)
    (defun childframe-workable-p ()
      "Whether childframe is workable."
      (and (>= emacs-major-version 26)
           (not noninteractive)
           (not emacs-basic-display)
           (or (display-graphic-p)
               (featurep 'tty-child-frames))
           (eq (frame-parameter (selected-frame) 'minibuffer) 't)))
    (setq blink-matching-paren-highlight-offscreen t
          show-paren-context-when-offscreen
          (if (childframe-workable-p) 'child-frame 'overlay)))

  ;; common modes
  (column-number-mode t) ; Show column number in the modebar
  (show-paren-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-font-lock-mode t)
  ;; It seems that in Emacs 29.1, linum-mode has been removed
  ;; (global-linum-mode t)
  ;; use display-line-numbers-mode instead
  ;;(global-display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (when my/use-builtin-theme ; Use builtin theme
    (load-theme 'tango-dark t)
    )
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-hl-line-mode)
  ;; delete selection instead of removing only one character
  (delete-selection-mode 1)

  ;; transparent style
  (set-frame-parameter (selected-frame) 'alpha (list 90 90))
  (add-to-list 'default-frame-alist (cons 'alpha (list 90 90)))

  ;; from orbitingflea
  ;; set some basic keybinding. 
  (global-set-key [f5] #'(lambda () (interactive) (compile "make -k -j")))
  (global-set-key [f7] #'(lambda () (interactive) (compile "make clean")))
  (global-set-key [f11] 'shell)

  ;; For search adjustments
  ;; From https://github.com/condy0919/emacs-newbie/blob/master/introduction-to-builtin-modes.md#isearch
  (use-package isearch
    :ensure nil
    :bind (:map isearch-mode-map
                ([remap isearch-delete-char] . isearch-del-char))
    :custom
    (isearch-lazy-count t)
    (lazy-count-prefix-format "%s/%s ")
    (lazy-highlight-cleanup nil))
#+end_src

** Font Settings
包含基础字体配置、CJK/Unicode 类字体配置。

值得注意的是，中文字体需要进行 rescale 以确保大小和英文字体匹配，比例和显示设置有关。

测试：
+ 中文测试 test
+ Emoji test 😅 (Noto Color Emoji)

可能存在的 Bug：
+ 部分 face 可能错误绑定 CJK 字体
  使用 ~C-u C-x =~ 查看当前字符的字体信息，并作针对性调整

#+begin_src emacs-lisp
  ;; fonts
  (defun set-default-font ()
    (set-face-attribute 'default nil :font "Noto Sans Mono 14")
    (set-face-attribute 'help-key-binding nil :font "Noto Sans Mono 14")
    (set-face-attribute 'fixed-pitch nil :font "Noto Sans Mono 14")
    )

  (set-default-font)
  ;; enhancement:
  ;; ref: https://www.cnblogs.com/aqing1987/p/4464106.html
  ;; to make it properly executed in tty (i.e. `emacs -nw`)
  (defun s-font()
    (interactive)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset
                        ;;(font-spec :family "Source Han Sans CN" :size 18)))
                        (font-spec :family "Noto Sans Mono CJK SC" :size 14)))
    ;; tune rescale so that Chinese character width = 2 * English character width
    (setq face-font-rescale-alist
          ;; Use list and cons to evaluate the symbols
          (list (cons "Noto Sans Mono CJK SC" my/font-scale)))
    )

  ;; setup font in client mode
  (add-to-list 'after-make-frame-functions
               (lambda (new-frame)
                 (select-frame new-frame)
                 (set-default-font)
                 (if window-system
                     (s-font))))
  (if window-system
      (s-font))
#+end_src

** Use ZSH

Switch shell to zsh use =IN_EMACS= environment variable to recognize and to select theme
(theme with unicode does not work well due to the above font settings)

#+begin_src emacs-lisp
  (when my/use-zsh
    (progn
      (setenv "IN_EMACS" "1")
      ;; lsp-mode accidentally use `shell-file-name` to identify remote shells
      ;; which is not desired.
      ;; https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-mode.el#L7392
      (setenv "ESHELL" "/bin/zsh")
      ;;(setq shell-file-name "/bin/zsh")
      ))
#+end_src

** Terminal Intergration

Sometimes a terminal emacs is also used. These configs enable mouse support (click and scroll) in supported terminals.

#+begin_src emacs-lisp
  ;; Terminal mouse integration
  ;; Reference: https://www.gnu.org/software/emacs/manual/html_node/emacs/Text_002dOnly-Mouse.html
  ;; https://stackoverflow.com/questions/18198387/how-do-i-mouse-scroll-in-emacs-in-the-terminal-i-havent-gotten-mouse-wheel-mod
  ;; `gpm' may not properly setup, use xterm-mouse-mode instead
  ;; TODO: add checks
  (unless (display-graphic-p)
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line)
    )
#+end_src

** Remote

Config to accelerate Dirvish

#+begin_src elisp
(use-package tramp
  :config
  ;; Enable full-featured Dirvish over TRAMP on ssh connections
  ;; https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes
  (connection-local-set-profile-variables
   'remote-direct-async-process
   '((tramp-direct-async-process . t)))
  (connection-local-set-profiles
   '(:application tramp :protocol "ssh")
   'remote-direct-async-process)
  ;; Tips to speed up connections
  (setq tramp-verbose 0)
  (setq tramp-chunksize 2000)
  (setq tramp-ssh-controlmaster-options nil))
  #+end_src
* Plugins

We are using external packages.

** Interfaces

*** Parentheses

Display better parentheses.
+ Using =rainbow-delimiters= for different color for different levels.

#+begin_src emacs-lisp
  ;; Prettify display
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#161719")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))


  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode)
    )
#+end_src

*** Indentation

+ Using =highlight-indent-guides=, which gives a dashline for levels of indentation.

#+begin_src elisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom ((highlight-indent-guides-method 'bitmap)
             (highlight-indent-guides-auto-enabled nil))
    :config
    (set-face-foreground 'highlight-indent-guides-character-face "darkgray")
    )
#+end_src


*** Theme

More complicated and pretty theme settings.
+ Using =doom-themes= for global themes
+ Using =minions= for better minor-mode display
+ Using =solaire-mode= to provide different display between editing buffers and functional buffers

#+begin_src elisp
  (use-package doom-themes
    :unless my/use-builtin-theme
    :config
    ;; SEE: https://github.com/doomemacs/themes/tree/screenshots for more choices
    (load-theme 'doom-fairy-floss t)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (load-theme 'doom-fairy-floss t)))
    (doom-themes-org-config)
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)

    (when (not (window-system))
      ;; no background color is provided in terminal
      ;; so we need to force it to be no background
      ;;(set-background-color )
      )
    )

  ;; NOTE: RUN `nerd-icons-install-fonts` in the first run.
  (use-package doom-modeline
    :unless my/use-builtin-theme
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-icon (display-graphic-p))
    (doom-modeline-minor-modes t)
    )

  (use-package minions
    :unless my/use-builtin-theme
    :config (minions-mode 1))



  (use-package solaire-mode
    :defer 0.1
    :custom (solaire-mode-remap-fringe t)
    :config (solaire-global-mode)
    ;; https://github.com/hlissner/emacs-solaire-mode/issues/51
    (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
    (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
    )

#+end_src

*** Dashboard

+ Using =dashboard=, which gives a cleaner view for the startup window.

#+begin_src elisp

  (use-package dashboard
    ;;:hook
    ;;(dashboard-mode . emacs-lock-mode)
    :bind
    ("C-c d" . dashboard-open)
    :init
    (setq initial-buffer-choice 'dashboard-open)
    :custom
    (dashboard-center-content t)
    (dashboard-startup-banner 'logo)
    (dashboard-set-file-icons t)
    (dashboard-items '((recents  . 10)
                       (bookmarks . 3)
                       (projects . 3)
                       (agenda . 5)
                       ))
    ;;(dashboard-set-footer nil)
    (dashboard-startupify-list
     '(dashboard-insert-banner
       dashboard-insert-newline
       dashboard-insert-banner-title
       dashboard-insert-newline
       dashboard-insert-init-info
       dashboard-insert-items))

    :config
    (dashboard-setup-startup-hook))
#+end_src

** Buffer & Windows

+ Using =ace-window= to select which buffer to switch
+ Using =winner-mode= (builtin) to undo buffer size changes (ref. Hydra settings)
+ Setting =ibuffer= not to kill specific buffers

#+begin_src emacs-lisp
  ;; ACE-window
  (use-package ace-window
    :bind ("C-x o" . ace-window)
    :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    )
  (use-package winner
    :ensure nil
    :config (winner-mode))

  (use-package ibuffer
    :ensure nil
    :after dashboard
    :preface
    (defvar protected-buffers '("*scratch*" "*Messages*")
      "Buffer that cannot be killed.")

    (defun my/protected-buffers ()
      "Protect some buffers from being killed."
      (dolist (buffer protected-buffers)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill))))
    :bind ("C-x C-b" . ibuffer)
    :config (my/protected-buffers))  
#+end_src

** Navigation & Minibuffer

+ Using =avy= for quick jump to line
+ For better minibuffer completion
  - Option 1: helm
  - Option 2: vertico/consult/orderless


#+begin_src emacs-lisp
  (use-package avy
    :bind (("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0)))

  (use-package helm
    :when (eq my/minibuffer-backend 'helm)
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           )
    :config (helm-mode 1)
    )
  (use-package helm-lsp
    :when (eq my/minibuffer-backend 'helm)
    :after (helm lsp))


  (use-package vertico
    :when (eq my/minibuffer-backend 'vertico)
    :init (vertico-mode)
    :bind (:map vertico-map
                ("C-<backspace>" . vertico-directory-up)
                ("C-l" . vertico-directory-up)
                ("RET" . vertico-directory-enter)
                )
    :custom (vertico-cycle t)
    :config
    (vertico-multiform-mode)
    (add-to-list 'vertico-multiform-categories '(embark-keybinding grid))
    )

  (use-package marginalia
    :when (eq my/minibuffer-backend 'vertico)
    :init (marginalia-mode))
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-," . embark-dwim)
     ("C-h B" . embark-bindings))

    :custom
    (embark-indicators
     '(embark-minimal-indicator  ; default is embark-mixed-indicator
       embark-highlight-indicator
       embark-isearch-highlight-indicator))
    (embark-help-key "?") ; All typical moving & searching commands are available.
    )

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :when (eq my/minibuffer-backend 'vertico)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :when (eq my/minibuffer-backend 'vertico)
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )

  (use-package orderless
    :when (eq my/minibuffer-backend 'vertico)
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Multiple Editing

+ Using =multiple-cursors= and =iedit= to allowing rectangular multi-cursors, or replacing all occurance at once.

#+begin_src emacs-lisp
  ;; multiple cursors
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this)
    )
  ;; iedit-mode
  (use-package iedit
    :bind (("C-:" . iedit-mode)))

#+end_src

** Completion & Syntax Checking & Formatting

+ Using =company= for completion
+ Using =yasnippet= for template completion (templates are underway)
+ Using =flycheck= for syntax checking
+ Allowing =editorconfig= specifications


#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :bind
    ;;("C-i" . company-complete-common)
    :custom
    (company-idle-delay 0.5)
    (company-minimum-prefix-length 1)
    )

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package yasnippet
    :after company
    :hook (prog-mode . yas-minor-mode)
    :init
    (add-to-list 'company-backends '(company-capf :with company-yasnippet))
    :config
    (yas-reload-all)
    )

  (use-package flycheck
    :when (not (eq my/use-lsp-frontend 'eglot))
    :hook (prog-mode . flycheck-mode))

  (use-package flymake
    :when (eq my/use-lsp-frontend 'eglot)
    :hook (prog-mode . flymake-mode)
  )


  (use-package editorconfig
    :hook (prog-mode . editorconfig-mode)
    )
#+end_src

** Treemacs

Not using anymore (too complicated), switched to dirvish.

#+begin_src emacs-lisp :tangle no
  (use-package treemacs
    :ensure t
    :bind
    ([f12] . treemacs)
    ("M-o" . treemacs-select-window)
    :hook
    (treemacs-mode . (lambda () (display-line-numbers-mode 0)))
    :config
    (treemacs-project-follow-mode)
    )
  (use-package treemacs-projectile
    :after (treemacs projectile))
  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src

** Undo

+ Using =undo-fu= for better undo logic,
+ Using =vundo= for undo trees

#+begin_src emacs-lisp
  (use-package undo-fu
    :config
    (setq undo-limit 400000           ; 400kb (default is 160kb)
          undo-strong-limit 3000000   ; 3mb   (default is 240kb)
          undo-outer-limit 48000000)  ; 48mb  (default is 24mb)
    :bind
    (([remap undo] . undo-fu-only-undo)
     ("C-?" . undo-fu-only-redo)
     )
    )

  (use-package vundo)

#+end_src

** Editing

+ Using =smart-hungry-delete= to allow delete multiple whitespaces at once.

#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
           ([remap delete-backward-char] . smart-hungry-delete-backward-char)
           ([remap delete-char] . smart-hungry-delete-forward-char))
    :init (smart-hungry-delete-add-default-hooks)
    )

#+end_src

** History

+ Setting =resentf=
+ Using =keyfreq= to record keybinding usages.

#+begin_src emacs-lisp
  (use-package recentf
    :bind ("C-x C-r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"
                           "~$"
                           "COMMIT_EDITMSG"
                           "~/.emacs.d/recentf"
                           "~/.emacs.d/bookmarks"
                           "~/.emacs.d/persp-confs"
                           "~/Desktop/\\..+"
                           ))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    ;; Save recent files every 5 minutes to manage abnormal output.
    :config (run-at-time nil (* 5 60) 'recentf-save-list))

  (use-package keyfreq
    :init
    (keyfreq-mode)
    (keyfreq-autosave-mode)
    :custom
    (keyfreq-file (my/expand-config-dir "keyfreq"))
    (keyfreq-file-lock (my/expand-config-dir "keyfreq.lock"))
    )
#+end_src

** Project & LSP

#+begin_src emacs-lisp
  ;;; Projectile
  (use-package projectile
    :hook
    (prog-mode . projectile-mode)
    :bind
    ("C-c P" . projectile-command-map)
    )
#+end_src

#+begin_src emacs-lisp
  (defun my/start-lsp ()
    "The start command of lsp frontent"
    (when (eq my/use-lsp-frontend 'lsp-mode) (lsp-deferred)) 
    (when (eq my/use-lsp-frontend 'eglot) (eglot-ensure))
    )

  (use-package eglot
    :when (eq my/use-lsp-frontend 'eglot)
    :config
    (add-hook 'eglot-managed-mode-hook (lambda ()
                                         (add-to-list 'company-backends
                                                      '(company-capf :with company-yasnippet))))
    )
#+end_src
*** COMMENT lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :when (eq my/use-lsp-frontend 'lsp-mode)
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-keymap-prefix "C-c l")
    (gc-cons-threshold (* 100 1024 1024))
    (read-process-output-max (* 1024 1024))
    (treemacs-space-between-root-nodes nil)
    (lsp-idle-delay 0.5)
    (lsp-inlay-hint-enable t)
    (lsp-rust-analyzer-inlay-hints-mode t)
    )

  (use-package lsp-ui
    :when (eq my/use-lsp-frontend 'lsp-mode)
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs
    :when (eq my/use-lsp-frontend 'lsp-mode)
    )
#+end_src

*** TODO lsp-bridge

** Dired
*** Simple Config

#+begin_src emacs-lisp :tangle no
   (use-package dired
     :ensure nil
     :commands (dired dired-jump)
     ;; :bind (:map dired-mode-map
     ;;             ("h" . dired-up-directory)
     ;;             ("j" . dired-next-line)
     ;;             ("k" . dired-previous-line)
     ;;             ("l" . dired-single-buffer))
     :delight "Dired"
     :custom
     (dired-auto-revert-buffer t)
     (dired-dwim-target t)
     (dired-hide-details-hide-symlink-targets nil)
     (dired-listing-switches "-alh --group-directories-first --time-style=iso")
     (dired-ls-F-marks-symlinks nil)
     )

   (use-package dired-single
     :after dired
     :bind (:map dired-mode-map
                 ([remap dired-find-file] . dired-single-buffer)
                 ([remap dired-up-directory] . dired-single-up-directory)
                 ("M-DEL" . dired-prev-subdir)))

   (use-package all-the-icons-dired
     :if (display-graphic-p)
     :hook (dired-mode . all-the-icons-dired-mode))

   (use-package dired-hide-dotfiles
     :hook (dired-mode . dired-hide-dotfiles-mode)
     :bind (:map dired-mode-map
                 ("H"
                  . dired-hide-dotfiles-mode)))

   (use-package dired-subtree
     :after dired
     :bind (:map dired-mode-map
                 ("<tab>" . dired-subtree-toggle)))

   (use-package dired-git)

#+end_src

*** Dirvish

+ Iconized & subtree display
+ Support file preview
+ Support sidebar
+ Can also be used as a real file manager

#+begin_src elisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :preface
    (defun my/toggle-dired-hidden-files ()
      "Toggle hidden files by modifying `dired-listing-switches`."
      (interactive)
      (if (string-match-p " --almost-all " (concat " " dired-actual-switches " ")) ; 检查是否包含 --almost-all
          (progn
            (setq dired-listing-switches (replace-regexp-in-string " ?--almost-all ?" " " dired-listing-switches)) ; 移除 --almost-all
            (setq dired-actual-switches (replace-regexp-in-string " ?--almost-all ?" " " dired-actual-switches)) ; 如果 actual 包含也移除
            )
        (progn
          (setq dired-actual-switches (concat dired-actual-switches " --almost-all")) ; 添加 --almost-all
          (unless (string-match-p " --almost-all " (concat " " dired-listing-switches " ")) ; 检查是否包含 --almost-all
            (setq dired-listing-switches (concat dired-listing-switches " --almost-all"))
            )
          ))
      (revert-buffer)) ; 刷新目录

    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("s" "~/Documents/"                "Documents")
       ("w" "~/workspace/"                "Workspace")
       ))
    :hook
    (dired-mode . (lambda () (display-line-numbers-mode -1)))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-mode-line-format
          '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes           ; The order *MATTERS* for some attributes
          '(vc-state subtree-state nerd-icons collapse git-msg file-time file-size)
          dirvish-side-attributes
          '(vc-state nerd-icons collapse file-size))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --human-readable --group-directories-first --no-group")

    ;; Ref: https://emacs-china.org/t/dirvish-dired/20189/310
    (with-eval-after-load "persp-mode"
      (setq dirvish--scopes
            '(:frame selected-frame :tab tab-bar--current-tab-index :persp get-current-persp)))

    :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    (;;("C-c f" . dirvish-fd)
     ([f12] . dirvish-side)
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("?"   . dirvish-dispatch)
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("DEL" . dired-up-directory)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("P"   . my/toggle-dired-hidden-files)
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)))
#+end_src
*** Other Configs
#+begin_src emacs-lisp
  ;; view package into separate file.
  (use-package arview)
#+end_src
** Hydra

Integrated keybindings for some modes.

#+begin_src emacs-lisp
  (use-package hydra
    :bind (;;("C-c I" . hydra-image/body)
           ;;("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ;; ("C-c T" . hydra-tool/body)
           ;; ("C-c b" . hydra-btoggle/body)
           ;; ("C-c c" . hydra-clock/body)
           ;; ("C-c e" . hydra-circe/body)
           ("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ;; ("C-c m" . hydra-magit/body)
           ("C-c o" . hydra-org/body)
           ;; ("C-c p" . hydra-projectile/body)
           ;; ("C-c s" . hydra-spelling/body)
           ;; ("C-c t" . hydra-tex/body)
           ;; ("C-c u" . hydra-upload/body)
           ("C-c w" . hydra-windows/body)
           ;;("C-c r" . hydra-treemacs/body)
           ("C-c v" . hydra-view/body)
           )
    )

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))

  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))

  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))

  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ;;("c" centered-window-mode "center")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("o" ace-window "switch")
      ("t" treemacs-select-window "treemacs")
      ;;("s" switch-window-then-swap-buffer "swap" :color teal)
      )
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))

  (pretty-hydra-define hydra-treemacs
    (:hint nil :color pink :quit-key "q" :title (with-faicon "tree" "Treemacs" 1 -0.05))
    ("Project"
     (("a" treemacs-add-project "Add")
      ("r" treemacs-remove-project-from-workspace "Remove"))
     "Workspace"
     (("s" treemacs-switch-workspace "Switch")
      ("e" treemacs-edit-workspaces "Edit")   
      )
     )
    )

  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" org-capture-goto-last-stored "jump-capture")
      ("k" org-cut-subtree "cut-subtree")
      ("m" org-modern-mode "modern display")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree")
      )

     ))

  (defhydra hydra-view
    (:hint nil :color amaranth)
    "View: move like vi, q to quit"
    ("h" backward-char)
    ("l" forward-char)
    ("k" previous-line)
    ("j" next-line)
    ("a" move-beginning-of-line)
    ("d" move-end-of-line)
    ("q" nil :color blue)
    )

#+end_src

** PDF

Better pdf-preview with =pdf-tool= and =pdf-view=.

*External package installation required.*

#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query)
    )

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))    
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    ;; Avoid searching for unicodes to speed up pdf-tools.
    (pdf-view-use-unicode-ligther nil)
    ;; Enable HiDPI support, at the cost of memory.
    (pdf-view-use-scaling t))

#+end_src

** AI

*** Copilot

AI-based code generation

#+begin_src emacs-lisp
  (use-package copilot
    :config
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))
#+end_src

*** Ellama

Chat-based AI assistant.
*Current using local Ollama instance*.

#+begin_src elisp
  (use-package ellama
    :when (member 'ellama my/enabled-feat)
    :bind ("C-c e" . ellama-transient-main-menu)
    )
#+end_src
** workspace
*** Perspective.el
Key bindings (Prefix is =C-x p=, which overrides projectile, which is now =C-c P=):
+ =p/n=: next/prev perspective
+ =s=: switch (new) perspective

For consult, =C-x b= switches to current perspective, type =b <SPC>= re-enables all perspectives. See [[https://github.com/minad/consult#narrowing-and-grouping][here]].

However, it does not support frame, which means perspectives cannot share among emacs clients.

#+begin_src emacs-lisp :tangle no
  ;; (use-package perspective
  ;;   :bind
  ;;   ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
  ;;   :custom
  ;;   (persp-mode-prefix-key (kbd "C-x p"))  ; pick your own prefix key here
  ;;   :init
  ;;   (persp-mode)
  ;;   :hook
  ;;   (ibuffer . (lambda ()
  ;;                (persp-ibuffer-set-filter-groups)
  ;;                (unless (eq ibuffer-sorting-mode 'alphabetic)
  ;;                  (ibuffer-do-sort-by-alphabetic))))
  ;;   :config
  ;;   (with-eval-after-load 'consult
  ;;     (consult-customize consult--source-buffer :hidden t :default nil)
  ;;     (add-to-list 'consult-buffer-sources persp-consult-source))
  ;;   )
#+end_src

*** Presp-mode
There are some issues

Use [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]].

[[https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d][Here]] provides usage examples to interact with other packages. However, some of them do not compile.
For example, it uses =delete*= in common lisp (which is =cl-delete= in elisp).

TODO: Auto persp for each ssh session, [[https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-projectile-auto-persp-el][Reference.]]

#+begin_src emacs-lisp
  (use-package persp-mode
    :custom
    (wg-morph-on nil)
    (persp-autokill-buffer-on-remove 'kill-weak)
    (persp-auto-resume-time -1)
    :init
    (persp-mode 1)
    (persp-switch "workspace")
    :config


    (with-eval-after-load 'consult
      (defun my/consult-switch-to-buffer ()
        "`consult-buffer' with buffers provided by persp."
        (interactive)
        (with-persp-buffer-list () (consult-buffer)))
      (global-set-key (kbd "C-x b") #'my/consult-switch-to-buffer))

    ;; Shows groups for all perspectives. But can't show same buffer in multiple groups.

    (with-eval-after-load 'ibuffer
      (require 'ibuf-ext)

      (define-ibuffer-filter persp
          "Toggle current view to buffers of current perspective."
        (:description "persp-mode"
                      :reader (persp-prompt nil nil (safe-persp-name (get-frame-persp)) t))
        (cl-find buf (safe-persp-buffers (persp-get-by-name qualifier))))

      (defun persp-add-ibuffer-group ()
        (let ((perspslist (mapcar #'(lambda (pn)
                                      (list pn (cons 'persp pn)))
                                  (nconc
                                   (cl-delete persp-nil-name
                                              (persp-names-current-frame-fast-ordered)
                                              :test 'string=)
                                   (list persp-nil-name)))))
          (setq ibuffer-saved-filter-groups
                (cl-delete "persp-mode" ibuffer-saved-filter-groups
                           :test 'string= :key 'car))
          (push
           (cons "persp-mode" perspslist)
           ibuffer-saved-filter-groups)))

      (defun persp-ibuffer-visit-buffer ()
        (interactive)
        (let ((buf (ibuffer-current-buffer t))
              (persp-name (get-text-property
                           (line-beginning-position) 'ibuffer-filter-group)))
          (persp-switch persp-name)
          (switch-to-buffer buf)))

      (define-key ibuffer-mode-map (kbd "RET") 'persp-ibuffer-visit-buffer)
      (define-key ibuffer-mode-map (kbd "g") #'(lambda () (interactive)
                                                 ;; We need to update perspective lists before
                                                 ;; updating ibuffer
                                                 (persp-add-ibuffer-group)
                                                 (ibuffer-switch-to-saved-filter-groups "persp-mode")
                                                 ))
      (add-hook 'ibuffer-mode-hook
                #'(lambda ()
                    (persp-add-ibuffer-group)
                    (ibuffer-switch-to-saved-filter-groups "persp-mode")
                    )))

    ;; Add Dired buffer to current persp
    ;; see documentation for other possible values
    (setq persp-add-buffer-on-after-change-major-mode t)
    
    ;; above setting will not discriminate and bring ephemeral buffers e.g.
    ;; *magit* which you probably don't want. You can filter them out.
    (add-hook 'persp-common-buffer-filter-functions
    ;; there is also `persp-add-buffer-on-after-change-major-mode-filter-functions'
        #'(lambda (b) (string-prefix-p "*" (buffer-name b))))

    )
#+end_src
** Search
=ripgrep= is a good utility to search files in a directory.
#+begin_src elisp
  ;; Frontend of ripgrep (rg)
  (use-package deadgrep
    :when (not (file-exists-p (my/expand-config-dir "deps/color-rg")))
    :bind
    ("<f6>" . deadgrep))

  ;; Find and replace
  (use-package color-rg
    :when (file-exists-p (my/expand-config-dir "deps/color-rg"))
    :load-path "deps/color-rg"
    :bind
    (("<f6>" . color-rg-search-input-in-project)
     ("C-<f6>" . color-rg-search-symbol-in-project))
    )
#+end_src
** Miscs

#+begin_src emacs-lisp
  ;; Highlight all TODO/FIXME/etc.
  (use-package hl-todo
    :config
    (global-hl-todo-mode)
    )

  ;; Allow code folding
  ;; hs-minor-mode
  (use-package hideshow
    :preface
    (defun enable-hs ()    
      "Enable hs-minor mode and key binding."
      (hs-minor-mode)
      (global-set-key [f9] 'hs-toggle-hiding)
      )
    :hook
    (prog-mode . enable-hs)
    )

  ;; Git integration
  (use-package magit)

  ;; Key binding help
  (use-package which-key
    :init (which-key-mode))

  (use-package keychain-environment
    :config
    (keychain-refresh-environment)
    )

  ;; Terminal Replacement
  (use-package eat
    :bind
    ("<f11>" . eat))

  (use-package all-the-icons)

  ;; Guess and adjust indent styles.
  (use-package dtrt-indent
    :init
    (dtrt-indent-global-mode))

  ;; Use Emacs as editor in browsers (but losing loads of features)
  (use-package atomic-chrome
    :init
    (atomic-chrome-start-server)
    )

#+end_src

* Languages
** Treesitter

Some helper functions to enable treesitter in certain languages.

*All treesitter library should be prepared in advance.*

#+begin_src emacs-lisp
  (when (and (version<= "29.1" emacs-version)
             (treesit-available-p))
    (defmacro my/enable-treesitter (lang)
      `(when (treesit-language-available-p ',lang)
         (add-to-list 'major-mode-remap-alist
                      '(,(intern (concat (symbol-name lang) "-mode")) .
                        ,(intern (concat (symbol-name lang) "-ts-mode"))
                        )
                      )
         )
      )
    (my/enable-treesitter python)
    (my/enable-treesitter rust)
    )
#+end_src

** C/C++

I slightly changed the default coding style (gnu) by adjusting the indentation of multiple lines in parentheses.

*Using either =ccls= or =clangd= as language server, which should be installed externally*.

#+begin_src emacs-lisp
  (use-package cc-mode
    :preface
    (defun my-c-style ()
      "Setup Personal C Style."
      (c-set-style "my-style")
      )

    :config
    (c-add-style "my-style"
                 '("gnu"
                   (c-offsets-alist . ((arglist-intro . +)
                                       (arglist-cont . 0)
                                       (arglist-cont-nonempty . c-lineup-arglist)
                                       (arglist-close . 0)))))
    :hook
    (c-mode-common-hook  . my-c-style)
    ((c-mode c++-mode objc-mode cuda-mode c-ts-mode c++-ts-mode) .
     my/start-lsp)
    )

  ;; Treesitter of C/C++ should be set independantly
  (use-package c-ts-mode
    :if (and (version<= "29.1" emacs-version)
             (treesit-available-p)
             (treesit-language-available-p 'cpp)
             (treesit-language-available-p 'c))

    :preface
    ;; Ref: https://emacs.stackexchange.com/questions/77232/c-c-with-tree-sitter-how-to-change-indent
    (defun my-indent-style ()
      "Override the built-in BSD indentation style with some additional rules"
      `(;; Here are your custom rules
        ((node-is ")") parent-bol 0)
        ((match nil "argument_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
        ((parent-is "argument_list") (nth-sibling 1) 0)
        ((match nil "parameter_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
        ((parent-is "parameter_list") (nth-sibling 1) 0)
        ((lambda (node parent bol &rest _)
           (and (string-match-p "compound_statement" (treesit-node-type parent))
                ;; from treesit.el, finding prev-sibling + parent-is
                (string-match-p "preproc"
                                (or (treesit-node-type
                                     (or (treesit-node-prev-sibling node t)
                                         ;; If node is nil (indenting empty
                                         ;; line), we still try to guess the
                                         ;; previous sibling.
                                         (treesit-node-prev-sibling
                                          (treesit-node-first-child-for-pos
                                           parent bol)
                                          t)))
                                    "")
                                )
                ))
         standalone-parent c-ts-mode-indent-offset)
        ;; Append here the indent style you want as base
        ,@(alist-get 'gnu (c-ts-mode--indent-styles 'cpp))))
    :custom
    (c-ts-mode-indent-style #'my-indent-style)
    :init

    (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
    (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
    )

  ;; NOTE: Install ccls through your package manager / compile yourself.
  (use-package ccls
    :when (and (member 'cpp my/enabled-lang)
               (eq my/use-lsp-frontend 'lsp-mode)
               nil)
    ;;    :after (projectile lsp)
    :hook ((c-mode c++-mode objc-mode cuda-mode c-ts-mode c++-ts-mode) .
           lsp-deferred)
    :config
    (add-to-list 'lsp-enabled-clients 'ccls)
    (add-to-list 'lsp-enabled-clients 'clangd)
    (add-to-list 'lsp-enabled-clients 'ccls-tramp)
    (add-to-list 'lsp-enabled-clients 'clangd-tramp)
    )

  (use-package cuda-mode
    :when (member 'cuda my/enabled-lang)
    :hook
    (cuda-mode-hook . my-c-style))
  (use-package cmake-mode)
#+end_src

** Python

*Mainly use =jedi= as language server*.

#+begin_src emacs-lisp
  ;; Python configuration

  (use-package python-mode
    :hook
    ((python-mode python-ts-mode) . my/start-lsp)
    )

  ;;(use-package python-ts-mode
  ;;  :when (
  ;;             (treesit-language-available-p 'python))
  ;;  :init
  ;;  (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
  ;;  )


  ;; NOTE: run `jedi:install-server` in the first run
  ;; NOTE: Install jedi-language-server through pip (or other package manager)
  (use-package lsp-jedi
    :when (and (member 'python my/enabled-lang)
               (eq my/use-lsp-frontend 'lsp-mode))
    :config
    (with-eval-after-load "lsp-mode"
      ;;(add-to-list 'lsp-jedi-python-library-directories "/home/jhdjames37/miniconda3/") ;; Add conda support
      (add-to-list 'lsp-disabled-clients 'pyls)
      (add-to-list 'lsp-enabled-clients 'jedi)
      (add-to-list 'lsp-enabled-clients 'pyls-tramp)
      (add-to-list 'lsp-enabled-clients 'jedi-tramp)
      ))

  (use-package company-jedi
    :after lsp-jedi)

  (use-package jupyter)
#+end_src

** TODO Javascript

#+begin_src emacs-lisp
  ;; Config for javascript/typescript
  ;; Language Server Config:
  ;; M-x lsp-install-server RET ts-ls RET

  ;; TODO: (if I had chance to use JS again,) modify this.

  (defun js-enable ()
    (add-to-list 'lsp-enabled-clients 'ts-ls)
    (enable-programming-modes)
    (setq create-lockfiles nil)  ; lock files will kill `npm start'
    )

  (defun web-enable ()
    (js-enable)
    (setq web-mode-enable-auto-pairing nil)
    )

  (add-hook 'js-mode-hook 'js-enable)
  (add-hook 'javascript-mode-hook 'js-enable)
  (add-hook 'typescript-mode-hook 'js-enable)
  (add-hook 'web-mode-hook 'web-enable)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)) ; For React file
#+end_src

** Rust

#+begin_src emacs-lisp
    ;;; NOTE: install rust-analyzer through rustup.
  (use-package rust-mode
    :when (member 'rust my/enabled-lang)
    :hook (rust-mode . my/start-lsp)
    :init
    (when (eq my/use-lsp-frontend 'lsp-mode)
      (add-to-list 'lsp-enabled-clients 'rust-analyzer))
    )

  (use-package cargo)
#+end_src

** TODO Markdown

#+begin_src emacs-lisp
  ;; Markdown mode

  (when (member 'markdown my/enabled-lang)
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

    (autoload 'gfm-mode "markdown-mode"
      "Major mode for editing GitHub Flavored Markdown files" t)
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

    (setq markdown-enable-math t)

    ;;(setq markdown-command "python3 /home/jhdjames37/Tools/markdown-render/render.py")
    (setq markdown-command "pandoc --mathjax | python3 /home/jhdjames37/Tools/markdown-render/render2.py")
    )
#+end_src

** TeX

*Using =texlab= as lsp server*.

#+begin_src emacs-lisp
  (use-package lsp-latex
    :when (member 'latex my/enabled-lang)
    ;;:after lsp
    :hook
    ((tex-mode latex-mode LaTeX-mode) . my/start-lsp)
    :init
    (when (eq my/use-lsp-frontend 'lsp-mode)
      (add-to-list 'lsp-enabled-clients 'texlab))
    (when (eq my/use-lsp-frontend 'eglot)
      (add-to-list 'eglot-server-programs
                   '((tex-mode context-mode texinfo-mode bibtex-mode) .
                     ("texlab"))))
    :custom
    (lsp-latex-forward-search-executable "okular")
    (lsp-latex-forward-search-args '("--unique" "file:%p#src:%l%f"))
    (lsp-latex-build-args '("-xelatex" "-halt-on-error" "-interaction=nonstopmode" "%f"))
    (lsp-latex-build-on-save t)
    )

  (use-package tex
    :when (member 'latex my/enabled-lang)
    :ensure auctex
    :after yasnippet
    :hook
    ((LaTeX-mode tex-mode latex-mode) .
     (lambda ()
       (company-mode)
       (yas-minor-mode)
       (setq TeX-auto-untabify t     ; remove all tabs before saving
             TeX-engine 'xetex       ; use xelatex default
             TeX-show-compilation t) ; display compilation windows
       (setq TeX-save-query nil)
       (imenu-add-menubar-index)  
       )
     )
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default Tex-master nil)
    ;;(set-face-attribute 'font-latex-verbatim-face nil :font "Noto Sans Mono 14")
    )

  (use-package reftex
    :when (member 'latex my/enabled-lang)
    :custom
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t)
    )

  ;;(use-package company-auctex
  ;;  :when (member 'latex my/enabled-lang))
#+end_src

** Typst

#+begin_src emacs-lisp
  (use-package typst-ts-mode
    :when (and (version<= "29.1" emacs-version)
               (treesit-available-p)
               (file-exists-p (my/expand-config-dir "deps/typst-ts-mode/typst-ts-mode.el")))
    :load-path "deps/typst-ts-mode")
#+end_src

** TODO Shell Scripts

** TODO Elisp

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :when (member 'yaml my/enabled-lang)
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** Dot-Env

#+begin_src emacs-lisp
  (use-package dotenv-mode
    :when (member 'dotenv my/enabled-lang))
#+end_src

** Dockerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :when (member 'dockerfile my/enabled-lang))
#+end_src

** Caddyfile

#+begin_src emacs-lisp
  (use-package caddyfile-mode
    :when (member 'caddyfile my/enabled-lang))
#+end_src

** Bison
#+begin_src emacs-lisp
  (use-package bison-mode
    :when (member 'bison my/enabled-lang))
#+end_src

* Org mode

There are much settings that I never use.

** Basic Setup
#+begin_src emacs-lisp
  (use-package org
    :when (member 'org my/enabled-lang)
    :ensure org-contrib
    :delight "Θ"
    :hook (org-mode . turn-off-auto-fill)
    :bind ("C-c i" . org-insert-structure-template)
    :init
    (require 'ox-latex)
    :preface
    (defun my/org-use-speed-commands-for-headings-and-lists ()
      "Activate speed commands on list items too."
      (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
          (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

    (defmacro ignore-args (fnc)
      "Returns function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))
    :hook ((org-mode . visual-line-mode)
           (auto-save . org-save-all-org-buffers))
    :custom
    (org-archive-location "~/Documents/notes/archives/%s::")
    (org-blank-before-new-entry '((heading . nil)
                                  (plain-list-item . nil)))
    (org-confirm-babel-evaluate nil)
    (org-cycle-include-plain-lists 'integrate)
    (org-ellipsis " ▾")
    (org-export-backends '(ascii beamer html icalendar latex man md org texinfo))
    (org-hide-emphasis-markers nil)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-modules '(org-crypt
                   org-habit
                   org-mouse
                   org-protocol
                   org-tempo))
    
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '((org-agenda-files :maxlevel . 1)
                          ))
    (org-refile-use-cache nil)
    (org-refile-use-outline-path nil)
    
    (org-startup-indented t)
    (org-startup-with-inline-images t)
    ;; https://emacs.stackexchange.com/questions/73528/emacs-visibility-not-working
    (org-startup-folded 'showall)
    
    (org-tag-alist
     '((:startgroup . "Context")
       ("@errands" . ?e)
       ("@project" . ?w)
       ("@regular" . ?r)
       ("@longterm" . ?l)
       (:endgroup)
       (:startgroup . "Difficulty")
       ("easy" . ?E)
       ("medium" . ?M)
       ("challenging" . ?C)
       (:endgroup)
       ))
    (org-tags-exclude-from-inheritance '("crypt"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "NEXT(n)"
                                   "SOMEDAY(.)"
                                   "WAITING(w)""|" "DONE(x!)" "CANCELLED(c@)")))
    (org-use-effective-time t)
    (org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)
    (org-yank-adjusted-subtrees t)

    (org-latex-compiler "xelatex")
    (org-latex-listings "listings")
    (org-export-with-tags nil)
    (org-export-with-toc nil)
    (org-export-with-section-numbers 0)
    (org-latex-default-class "org-article")

    (org-highlight-latex-and-related '(native scripts entities))
    :config
    ;;(add-to-list 'org-global-properties '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
    (add-to-list 'org-speed-commands '("r" call-interactively 'org-refile))
    (add-to-list 'org-speed-commands '("i" call-interactively 'org-clock-in))
    (add-to-list 'org-speed-commands '("o" call-interactively 'org-clock-out))
    (add-to-list 'org-speed-commands '("s" call-interactively 'org-schedule))
    (add-to-list 'org-speed-commands '("d" call-interactively 'org-deadline))
    (add-to-list 'org-speed-commands '("x" org-todo "DONE"))
    (add-to-list 'org-speed-commands '("y" org-todo-yesterday "DONE"))

    ;; Add to Code Blocks (`C-c i`)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))

    ;; Advice
    (advice-add 'org-deadline :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-schedule :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-store-log-note :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (advice-add 'org-todo :after (ignore-args #'org-save-all-org-buffers))
    
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (org-load-modules-maybe t)

    ;; Exporting to pdf
    (add-to-list 'org-latex-classes
                 `("org-article"
                   ,(f-read-text (my/expand-config-dir "org-export.tex"))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    )
#+end_src

** Prettify
#+begin_src elisp
  (use-package org-bullets
    :when (member 'org my/enabled-lang)
    :hook (org-mode . org-bullets-mode)
    )

  (use-package org-modern)
#+end_src
** Agenda
#+begin_src elisp
  (use-package org-agenda
    :when (member 'org my/enabled-lang)
    :ensure nil
    :bind (:map org-agenda-mode-map
                ("C-n" . org-agenda-next-item)
                ("C-p" . org-agenda-previous-item)
                ("j" . org-agenda-goto)
                ("X" . my/org-agenda-mark-done-next)
                ("x" . my/org-agenda-mark-done))
    :preface
    (defun my/org-agenda-mark-done (&optional arg)
      "Mark the current TODO as done in org-agenda."
      (interactive "P")
      (org-agenda-todo "DONE"))

    (defun my/org-agenda-mark-done-next ()
      "Mark the current TODO as done and add another task after it."
      (interactive)
      (org-agenda-todo "DONE")
      (org-agenda-switch-to)
      (org-capture 0 "t"))
    :custom

    (org-agenda-category-icon-alist
     `(("home" ,(list (all-the-icons-faicon "home" :v-adjust -0.05)) nil nil :ascent center :mask heuristic)
       ("inbox" ,(list (all-the-icons-faicon "inbox" :v-adjust -0.1)) nil nil :ascent center :mask heuristic)
       ("people" ,(list (all-the-icons-material "people" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
       ("work" ,(list (all-the-icons-material "work" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
       ("routine" ,(list (all-the-icons-material "repeat" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
       ))
    
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-files `(,my/org-agenda-location))
    ;;(org-agenda-inhibit-startup t)
    (org-agenda-show-log t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-span 14)
    (org-agenda-start-on-weekday 0)
    (org-agenda-start-with-log-mode t)
    (org-agenda-sticky nil)
    (org-agenda-tags-column 90)
    (org-agenda-time-grid '((daily today require-timed)))
    (org-agenda-use-tag-inheritance t)
    (org-columns-default-format "%14SCHEDULED %1PRIORITY %TODO %50ITEM %TAGS")
    (org-default-notes-file 'my/org-agenda-location)
    ;;(org-directory "~/Documents/agenda")
    (org-enforce-todo-dependencies t)
    (org-habit-completed-glyph ?✓)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-habit-today-glyph ?‖)
    (org-track-ordered-property-with-tag t))
#+end_src
** Capture
#+begin_src elisp
  (use-package org-capture
    :when (member 'org my/enabled-lang)
    :ensure nil
    :preface
    (defvar my/org-basic-task-template
      (concat "** TODO %^{Task}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-basic-task-no-todo-template
      (concat "** %^{Task}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task without todo item.")
    :custom
    (org-capture-templates
     `(
       ("a" "近期事项" entry (file+headline ,my/org-agenda-location "近期事项"),
        my/org-basic-task-template
        :empty-lines 0
        :prepend t
        :immediate-finish nil
        )
       ("s" "长期事项" entry (file+headline ,my/org-agenda-location "无固定 DDL"),
        my/org-basic-task-no-todo-template
        :empty-lines 0
        :prepend t
        :immediate-finish nil)
       )))
#+end_src
** Insert Image
#+begin_src elisp
  ;; Ref: https://hsingko.pages.dev/post/2021/12/23/org-download/
  (use-package org-download
    :when (member 'org my/enabled-lang)
    :config
    (setq-default org-download-heading-lvl nil)
    (setq-default org-download-image-dir "./.org-img")
    (setq org-download-backend "wget")
    (defun dummy-org-download-annotate-function (link)
      "")
    ;;(setq org-download-abbreviate-filename-function "relative")
    (setq org-download-annotate-function
          #'dummy-org-download-annotate-function)
    (setq org-download-screenshot-method "spectacle -brn -o %s")
    )
#+end_src

